#!/bin/bash

# A generic script which triggers a build in another repository using the Travis v3 API.
#
# Definitions:
#   Downstream repository
#     The repository containing the integration tests.
#   Upstream repository
#     The repository triggering the build request in the downstream repository.
#
# IMPORTANT NOTE:
#   Due to a Travis bug, the merge_mode "deep_merge" does not work unless your travis environment variables are
#   defined like this:
#
#     ROS_DISTRO: kinetic
#
#   NOT LIKE THIS:
#     -ROS_DISTRO: kinetic
#     -ROS_DISTRO= kinetic
#     ROS_DISTRO= kinetic
#
#   For more information on the topic, check the following links:
#     https://github.com/travis-ci/travis-ci/issues/8655
#     https://github.com/travis-ci/docs-travis-ci-com/issues/1485#issuecomment-351726416
#
# In order to contact the Travis API, an authorization token needs to be generated by running:
#   gem install travis
#   travis login --org
#   travis token --org
#
#   Add this token to the environment variable "AUTH_TOKEN" on the Travis website
#   This token gives you full access to Travis, so it's important to store it securely.
#
# Author: Isha Dijcks <isha@projectmarch.nl>

# The '%2F' is a URL encoded value of a forward slash '/' to ensure we perform the correct request.
DOWNSTREAM_REPO_SLUG="project-march%2Fmarch-iv"

# Run only on pull requests.
if [ "${TRAVIS_PULL_REQUEST}" == "false" ]; then
  exit 0
fi

# The body of the build request we are about to make.
# For customization, see
#   https://developer.travis-ci.org/resource/request#Request
#   https://docs.travis-ci.com/user/triggering-builds/

# deep_merge allows you to add more env variables to the existing variables in the downstream repository.
# IMPORTANT deep_merge is bugged without mention in the travis docs. See the top of this file for the workaround
body='{
 "request": {
     "message": "Build triggered by '${TRAVIS_REPO_SLUG}'",
     "branch":"develop",
     "config": {
        "merge_mode": "deep_merge",
        "env": {
            "global": {
                "DEPENDENT_BUILD": "true",
                "TRIGGER_BRANCH": "'${TRAVIS_PULL_REQUEST_BRANCH}'",
                "TRIGGER_REPO": "'${TRAVIS_REPO_SLUG}'"
            }
        }
      }
}}'

# Install jq for easy response parsing.
sudo apt-get install jq

# Make a request to start a Travis build and store the build id.
build=$(curl -X POST \
 -H "Content-Type: application/json" \
 -H "Accept: application/json" \
 -H "Travis-API-Version: 3" \
 -H "Authorization: token ${AUTH_TOKEN}" \
 -d "$body" \
 https://api.travis-ci.org/repo/${DOWNSTREAM_REPO_SLUG}/requests | jq '.request.id')


# Get the state of a Travis build using the build id.
get-state () {
    state=$(curl -X GET \
    -H "Content-Type: application/json" \
    -H "Accept: application/json" \
    -H "Travis-API-Version: 3" \
    -H "Authorization: token ${AUTH_TOKEN}" \
    https://api.travis-ci.org/repo/${DOWNSTREAM_REPO_SLUG}/request/$1 | jq '.builds[0].state')

    # Remove quotes around the state
    state=$(sed -e 's/^"//' -e 's/"$//' <<<"$state")
    echo ${state}
}

echo "${build}"

# Fail prematurely if the buildrequest did not return an id.
if [ -z "${build}" ]; then
    echo "build not created correctly"
    exit 1
fi


# All options of the state in which a Travis build can be.
travis_states=("created" "started" "passed" "canceled" "errored" "failed")

# Customize these to your liking.
travis_success_states=("passed")
travis_continue_states=("created" "started")
travis_fail_states=("canceled" "errored" "failed")


# Sleep for Travis to create the build
sleep 10

while true; do
    state=$(get-state "$build")

#    If this is not a valid travis state, fail.
    if [[ ! " ${travis_states[@]} " =~ "${state}" ]]; then
        echo "state $state is invalid"
        exit 1
    fi

# If this state is defined as a failure state, fail.
    if [[ " ${travis_fail_states[@]} " =~ "${state}" ]]; then
        echo "dependent build ${state}"
        exit 1
    fi

# if this state is defined as a success state, succeed.
    if [[ " ${travis_success_states[@]} " =~ "${state}" ]]; then
        echo "dependent build ${state}"
        exit 0
    fi

done

exit 1